{"version":3,"sources":["HomeScreen.js","NavBar.js","Instructions.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["HomeScreen","className","src","alt","to","NavBar","exact","Instructions","TILES","inOut","image","GRID_SIZE","Board","props","componentDidMount","setState","grid","createGrid","i","j","push","pos","selectGridPlace","item","selectedPlace","isSelected","state","clickTile","updatedGrid","map","played","gridSize","userOptions","this","key","style","width","height","onClick","Component","App","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ba79c22.chunk.js","sourcesContent":["import React from \"react\";\nimport './HomeScreen.css';\nimport { Link } from \"react-router-dom\";\n\nconst HomeScreen = () => {\n\n    return(\n        <>\n        <div className=\"container\">\n            <h1> Lost Gingerbread Man</h1>\n            <img src=\"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574936615/282749fe507ccbc57c839738ac599620_yzw70n.png\" alt=\"GingerBreadMan\"></img>\n            <Link to='/instructions'>\n                <button> Start Game </button>\n            </Link>\n        </div>\n        </>\n    );\n}\n\nexport default HomeScreen; ","import React from \"react\";\nimport  { NavLink } from \"react-router-dom\"\nimport './NavBar.css';\n\nconst NavBar = () => {\n\n    return(\n        <div className=\"bar\">\n            <NavLink \n                exact to=\"/\"\n            > Home </NavLink>\n            <NavLink \n                exact to=\"/instructions\"\n            > Instructions </NavLink>\n            <NavLink \n                exact to=\"/board\"\n            >Board </NavLink>\n        </div>\n    );\n}\n\nexport default NavBar; ","import React from \"react\";\nimport './Instructions.css';\n\nconst Instructions = () => {\n\n    return(\n        <>\n        <div className=\"container\">\n        <div>\n            <h1>Help Mr. Gingerbread find  his way back home in time for Christmas</h1>\n        </div>\n        <div>\n            <h2>Rules</h2>\n\n            <h2>Beware of warm glasses of milk </h2>\n            <p>\n                Even though a warm glass of milk can be conforting and  is great for your bones, \n                it can be a deadly weapon when used against invertebrate, sugar-based creatures,\n                 such as GingerBread Man. \n            </p>\n        </div>\n        </div>\n        </>\n    );\n}\n\nexport default Instructions; ","import React, { Component } from \"react\";\nimport './Board.css';\n\n\nconst TILES = [\n    {\n\n        inOut: [1,2],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574957905/12_agw2i1.png\",\n    },\n    {\n\n        inOut: [1,3],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574957905/13_zbrit8.png\",\n    },\n    {\n\n        inOut: [1,4],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574957905/14_mau2uu.png\",    \n    },\n    {\n\n        inOut: [2,3],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574957905/23_kaubjk.png\",\n    },\n    {\n\n        inOut: [2,4],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574957905/24_gz6wi9.png\",\n    },\n    {\n\n        inOut: [3,4],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574957905/34_pnrdqd.png\",\n    },\n]\n\nconst GRID_SIZE = 2; \n\nexport default class Board extends Component{\n\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n            grid: [], \n            gridSize: GRID_SIZE,\n            userOptions: TILES, \n            selectedPlace: {pos:[0,0]},\n            // destinyPlace:{pos:[0,1]}, \n        };\n      }\n\n    componentDidMount = () => {\n        this.setState(\n            {grid: this.createGrid()}, \n        )\n    }\n\n    createGrid = () => {\n        let grid = [];\n        \n        for(let i=0; i<(GRID_SIZE); i++){\n            for(let j=0; j<(GRID_SIZE); j++){\n                grid.push({pos:[i,j]})\n            }\n        }\n        return grid \n    }\n\n    selectGridPlace = (item) => {\n        this.setState({selectedPlace: item})\n    }\n\n    isSelected = () => {\n        if(this.state.selectedPlace){\n            return \"highlightClass\"\n        }\n    }\n\n    clickTile = (item) => {\n\n        this.setState((state) => {\n\n\n            const updatedGrid = state.grid.map((grid) => {\n                if(grid.pos === state.selectedPlace.pos) {\n                  grid.played = item\n                //   let adjacent = [grid.pos[0]+1, grid.pos[1]+1]\n                //   console.log(adjacent, grid.pos[0]+1)\n                }\n                return grid;\n              })\n\n            return {\n            ...state,\n            grid: updatedGrid\n            }\n          })\n    }\n\n\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <div className=\"game\">\n                <div className=\"gingerLeft\">\n                    <img \n                        src=\"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574936615/282749fe507ccbc57c839738ac599620_yzw70n.png\" \n                        alt=\"GingerBreadMan\"\n                    />\n                </div>\n                <div className=\"board\">\n                    {this.state.grid.map((item) => {\n                        return(\n                            <div \n                                key={item.pos} \n                                style={{width: `${100/this.state.gridSize}%`, height: `${100/this.state.gridSize}%` }}\n                                onClick={()=>{this.selectGridPlace(item)}}\n                            >\n                                <img \n                                    src={item.played ? item.played.image : 'https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574955874/istockphoto-480629555-612x612_k0lblw.jpg'} \n                                    alt=\"played\"\n                                />\n                            </div>\n                        ) \n                    })}\n                </div> \n                <div className=\"gingerRight\">\n                    <img \n                        src=\"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1574936615/fliped_kissclipart-gingerbread-house-clipart-gingerbread-house-christ-1e7764fe2ef77f40_okqcoe.png\" \n                        alt=\"GingerBreadHouse\"\n                    />\n                </div>\n            </div>\n\n                <div className=\"userOptions\">\n                    {this.state.userOptions.map((item) => {\n                        return(\n                            <div\n                                className=\"playedImg\" \n                                key={item.inOut}\n                                onClick={() => this.clickTile(item)}\n                            >\n                                {item.inOut}\n                                <img src={item.image} alt=\"path\"/>\n                            </div>\n                        ) \n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport HomeScreen from \"./HomeScreen\";\nimport NavBar from \"./NavBar\";\nimport Instructions from \"./Instructions\";\nimport Board from \"./Board\";\n\nclass App extends Component{\n\n  render() {\n    return (\n      <>\n        <NavBar/>\n        <Switch>\n          <Route\n            exact path=\"/\" render={() => \n              <HomeScreen/>\n            }\n            />\n          <Route\n            exact path=\"/instructions\" render={() => \n              <Instructions/>\n            }\n            />\n          <Route\n            exact path=\"/board\" render={() => \n              <Board/>\n            }\n            />\n        </Switch>\n      </> \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}