{"version":3,"sources":["Board.js","App.js","serviceWorker.js","index.js"],"names":["TILES","inOut","image","GRID_SIZE","Board","props","componentDidMount","setState","grid","createGrid","userOptions","createUserOptions","i","j","push","pos","UserTiles","random","Math","floor","selectGridPlace","item","selectedPlace","clickTile","state","updatedGrid","map","played","updatedUserOptions","option","displayPlaceImage","newTiles","gridSize","className","this","key","style","width","height","onClick","src","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f81d9203.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './Board.css';\n\n\nconst TILES = [\n    {\n\n        inOut: [1,2],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575033530/12_ywecq2.png\",\n    },\n    {\n\n        inOut: [1,3],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575033530/13_xs1t4u.png\",\n    },\n    {\n\n        inOut: [1,4],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575033530/14_q88ao5.png\",    \n    },\n    {\n\n        inOut: [2,3],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575033530/23_g55p2d.png\",\n    },\n    {\n\n        inOut: [2,4],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575033530/24_icr5v1.png\",\n    },\n    {\n\n        inOut: [3,4],\n\n        image : \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575033530/34_bo2t1a.png\",\n    },\n]\n\nconst GRID_SIZE = 6; \n\nexport default class Board extends Component{\n\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n            grid: [], \n            gridSize: GRID_SIZE,\n            userOptions: [], \n            selectedPlace: {pos:[0,0]},\n        };\n      }\n\n    componentDidMount = () => {\n        \n        this.setState({grid: this.createGrid()})\n\n        this.setState({userOptions: this.createUserOptions()})\n    }\n\n    createGrid = () => {\n        let grid = [];\n        \n        for(let i=0; i<(GRID_SIZE); i++){\n            for(let j=0; j<(GRID_SIZE); j++){\n                grid.push({pos:[i,j]})\n            }\n        }\n        return grid \n    }\n\n    createUserOptions = () => {\n        let UserTiles = []\n        for(let i=0; i<4; i++){\n            let random = Math.floor((Math.random() * 6))\n            UserTiles.push(TILES[random])\n        }\n        return UserTiles\n    }\n\n    selectGridPlace = (item) => {\n        this.setState({selectedPlace: item})\n    }\n\n    clickTile = (item) => {\n\n        this.setState((state) => {\n\n            const updatedGrid = state.grid.map((grid) => {\n                if(grid.pos === state.selectedPlace.pos) {\n                  grid.played = item\n                }\n            \n                return grid;\n              })\n\n            const updatedUserOptions = state.userOptions.map(option => {\n                    if(item.inOut === option.inOut){\n                        let random = Math.floor((Math.random() * 6))\n                        return option = (TILES[random])\n                    }\n                    return option; \n            })\n\n            return {\n            ...state,\n            grid: updatedGrid,\n            userOptions: updatedUserOptions\n            }\n          })\n    }\n    \n    displayPlaceImage = (item) => {\n        if(item.pos[0] === 0 && item.pos[1] === 0){\n            return \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575031153/ginger_grass-floor-png_rfa4be.png\"\n        }\n        else if(item.pos[0]=== GRID_SIZE-1 && item.pos[1] === GRID_SIZE-1){\n            return \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575031306/gingerhouse_grass-floor-png_dplulx.png\"\n        }else if((item.pos[0]=== 2 && item.pos[1] === 1) || (item.pos[0]=== 4 && item.pos[1] === 3)){\n            return \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575036424/milk_square_avlbz8.png\"\n        }\n        else if(item.played){\n            return item.played.image  \n        }else if(item === this.state.selectedPlace){\n            return\"https://www.yarwoodleather.com/wp-content/uploads/2016/12/Aneurin-Yellow-01.jpg\"\n        }else if(\n            (this.state.selectedPlace.pos[0]+1 === item.pos[0] && this.state.selectedPlace.pos[1] ===  item.pos[1]) ||\n            (this.state.selectedPlace.pos[1]+1 === item.pos[1] && this.state.selectedPlace.pos[0] ===  item.pos[0]) ||\n\n            (this.state.selectedPlace.pos[0]-1 === item.pos[0] && this.state.selectedPlace.pos[1] ===  item.pos[1]) ||\n            (this.state.selectedPlace.pos[1]-1 === item.pos[1] && this.state.selectedPlace.pos[0] ===  item.pos[0])\n        ){\n        return \"https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575028835/grass-floor-png_yrrjos.png\"\n        } else {\n            return 'https://res.cloudinary.com/ddoc8nfxb/image/upload/v1575030693/snowsquare_gg7gls.png'\n        } \n    } \n\n    newTiles = () => {\n        this.setState({\n            userOptions: this.createUserOptions()\n        })\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <div className=\"board\">\n                    {this.state.grid.map((item) => {\n                        return(\n                            <div \n                                className=\"boardPlace\"\n                                key={item.pos} \n                                style={{width: `${100/this.state.gridSize}%`, height: `${100/this.state.gridSize}%` }}\n                                onClick={()=>{this.selectGridPlace(item)}}\n                            >\n                                <img \n                                    src={this.displayPlaceImage(item)} \n                                    alt=\"played\"\n                                />\n                            </div>\n                        ) \n                    })}\n                </div> \n\n                <div className=\"userOptions\">\n                    {this.state.userOptions.map((item, i) => {\n                        return(\n                            <div\n                                className=\"playImg\" \n                                key={i}\n                                onClick={() => this.clickTile(item)}\n                            >\n                                <img \n                                    src={item.image} \n                                    alt=\"path\"\n                                />\n                            </div>\n                        ) \n                    })}\n                    <button\n                        onClick={this.newTiles}\n                    > Random </button>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\n// import HomeScreen from \"./HomeScreen\";\n// import NavBar from \"./NavBar\";\n// import Instructions from \"./Instructions\";\nimport Board from \"./Board\";\n\nclass App extends Component{\n\n  render() {\n    return (\n      <>\n        {/* <NavBar/> */}\n        {/* <Switch> */}\n          {/* <Route\n            exact path=\"/\" render={() => \n              <HomeScreen/>\n            }\n            />\n          <Route\n            exact path=\"/instructions\" render={() => \n              <Instructions/>\n            }\n            /> */}\n          {/* <Route */}\n            {/* exact path=\"/\" render={() =>  */}\n              <Board/>\n            {/* } */}\n            {/* /> */}\n        {/* </Switch> */}\n      </> \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}